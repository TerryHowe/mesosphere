---

- set_fact:
    public_url: "{{ graphite_public_url }}"
    proxy_url: "{{ graphite_proxy_url }}"
    ssl_cert_path: "/etc/nginx/conf.d/graphite-{{ region }}.{{ project }}.cloud.bobby.net.crt"
    ssl_key_path: "/etc/nginx/conf.d/graphite-{{ region }}.{{ project }}.cloud.bobby.net.key"

- name: Graphite ssl cert
  copy: content="{{lookup('vault', 'graphite-{{region}}.{{project}}.public', 'contents')}}" dest="{{ ssl_cert_path }}" owner=nginx group=nginx

- name: Graphite ssl key
  copy: content="{{lookup('vault', 'graphite-{{region}}.{{project}}.private', 'contents') }}" dest="{{ ssl_key_path }}" owner=nginx group=nginx mode=0600

- name: Graphite nginx config
  template: src=nginx.conf.j2 dest={{ nginx_site_dir }}/graphite.conf owner=nginx group=nginx
  notify:
    - reload nginx

- set_fact:
    public_url: "{{ grafana_public_url }}"
    proxy_url: "{{ grafana_proxy_url }}"
    ssl_cert_path: "/etc/nginx/conf.d/grafana-{{ region }}.{{ project }}.cloud.bobby.net.crt"
    ssl_key_path: "/etc/nginx/conf.d/grafana-{{ region }}.{{ project }}.cloud.bobby.net.key"

- name: Grafana ssl cert
  copy: content="{{lookup('vault', 'grafana-{{region}}.{{project}}.public', 'contents')}}" dest="{{ ssl_cert_path }}" owner=nginx group=nginx

- name: Grafana ssl key
  copy: content="{{lookup('vault', 'grafana-{{region}}.{{project}}.private', 'contents')}}" dest="{{ ssl_key_path }}" owner=nginx group=nginx mode=0600

- name: Grafana nginx config
  template: src=nginx.conf.j2 dest={{ nginx_site_dir }}/grafana.conf owner=nginx group=nginx
  notify:
    - reload nginx

- name: Grafana.ini config changes for dashboards, ldap, and anon
  template: src=grafana.ini.j2 dest=/etc/grafana/grafana.ini owner=root group=grafana mode=0640
  notify:
    - restart grafana

- name: Check for existing graphite datasource
  uri:
    url: "{{ grafana_proxy_url }}/api/datasources"
    method: GET
    user: admin
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
  register: datasources

- name: set grafana datasource fact
  set_fact:
    grafana_datasources: "{{ datasources.json | default([]) | map(attribute='name') | list }}"
    grafana_default: "graphite"

- name: Create graphite datasource, if necessary
  uri:
    url: "{{ grafana_proxy_url }}/api/datasources"
    body: >
      {
        "name": "{{ grafana_default }}",
        "type": "graphite",
        "url": "http://{{ hostvars[groups['graphite'][0]]['openstack']['private_v4'] }}",
        "access": "proxy",
        "basicAuth": false,
        "isDefault": true
      }
    body_format: json
    method: POST
    user: admin
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    status_code: 200
  when: grafana_default not in grafana_datasources

#-- Dashboard Config

#-- Create /var/lib/grafana/dashboards
- name: Create directory for grafana dashboards
  file: path=/var/lib/grafana/dashboards state=directory owner=grafana group=grafana mode=0755
  tags: [dashboards]

#-- Configure the default home view for Grafana
- name: Configure default home view for Grafana
  template: src=home.json.j2 dest=/usr/share/grafana/public/dashboards/home.json mode=0666
  tags: [dashboards]

#-- Copy dashboard json to /var/lib/grafana/dashboards/
- name: Copy over dashboards
  template: src={{ item }} dest=/var/lib/grafana/dashboards/ owner=grafana group=grafana
  tags: [dashboards]
  with_fileglob:
    - 'templates/dashboards/*.json'
  notify:
    - restart grafana

#-- LDAP Config
- name: Configure LDAP settings for Grafana
  template: src=ldap.toml.j2 dest=/etc/grafana/ldap.toml owner=root group=grafana mode=0640
  notify:
    - restart grafana

- include: collectd.yml
  tags:
    - monitoring

